<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>搭建黑群晖NAS+Frp内网穿透实现外网访问家庭NAS</title>
      <link href="/2019/08/01/nas-frp-2/"/>
      <url>/2019/08/01/nas-frp-2/</url>
      
        <content type="html"><![CDATA[<h1 id="搭建黑群晖NAS-Frp内网穿透实现外网访问家庭NAS"><a href="#搭建黑群晖NAS-Frp内网穿透实现外网访问家庭NAS" class="headerlink" title="搭建黑群晖NAS+Frp内网穿透实现外网访问家庭NAS"></a>搭建黑群晖NAS+Frp内网穿透实现外网访问家庭NAS</h1><h2 id="一-搭建黑群晖"><a href="#一-搭建黑群晖" class="headerlink" title="一.搭建黑群晖"></a>一.搭建黑群晖</h2><h3 id="工具准备"><a href="#工具准备" class="headerlink" title="工具准备"></a>工具准备</h3><table><thead><tr><th>名称</th><th>作用</th></tr></thead><tbody><tr><td>不用U盘一个</td><td>用作引导盘</td></tr><tr><td>不用的电脑或者买的微型机</td><td>安装NAS</td></tr><tr><td>家用电脑</td><td>用于安装和配置NAS</td></tr><tr><td>芯片无忧</td><td>用于查看U盘的PID和VID</td></tr><tr><td>osfmount</td><td>改写引导映像.img文件里面的PID和VID</td></tr><tr><td>Win32DiskImager</td><td>将映像文件写进U盘</td></tr><tr><td>Synology Assistant</td><td>用于配置NAS</td></tr></tbody></table><h3 id="制作引导盘方法一"><a href="#制作引导盘方法一" class="headerlink" title="制作引导盘方法一"></a>制作引导盘方法一</h3><ul><li><p>下载并安装芯片无忧、osfmount、Win32DiskImager、Synology Assistant</p></li><li><p>把U盘插入家用电脑 -&gt; 打开芯片无忧，会自动读取到U盘的PID和VID -&gt; 截图或用记事本记下来，后面会用到。<br><img src="http://www.zhangyukunblog.top/NAS-01.png" alt="image"></p></li><li><p>打开osfmount，点击左下角的Mount new<br><img src="http://www.zhangyukunblog.top/NAS-02.png" alt="image"></p></li><li><p>选择文件夹中的.img文件，一定注意要<strong>去掉</strong>窗口下面<strong>Read-only。 drvie前面的对号√</strong> -&gt; 点击OK<br><img src="http://www.zhangyukunblog.top/NAS-03-1.png" alt="image"></p></li><li><p>完成后双击打开，进入里面grub文件夹然后打开grub.cfg这个文件，找到并修改<strong>set vid = 0x1234；set vid=0x1234</strong>这两行里面的数字为刚才截图保存的数字。然后保存点击<strong>Dismount all &amp; Exit</strong></p><p>  <img src="http://www.zhangyukunblog.top/NAS-04.png" alt="image"><br><img src="http://www.zhangyukunblog.top/NAS-05.png" alt="image"></p></li><li><p>打开Win32DiskImager软件-&gt;选择img文件的路径-&gt;选择U盘的路径-&gt;点击write<br><img src="http://www.zhangyukunblog.top/NAS-06.png" alt="image"></p><p>  到此U盘引导制作完成</p></li></ul><hr><h3 id="在旧电脑安装DSM"><a href="#在旧电脑安装DSM" class="headerlink" title="在旧电脑安装DSM"></a>在旧电脑安装DSM</h3><ul><li><p>U盘插入旧电脑然后用U盘引导启动，出现下图即表示系统启动成功<br><img src="http://www.zhangyukunblog.top/NAS-07.png" alt="image"></p></li><li><p>在家用电脑上打开Synology Assistant，会自动搜索局域网里面的NAS主机<br><img src="http://www.zhangyukunblog.top/NAS-08.png" alt="image"></p></li><li><p>右键点击搜索到的主机 -&gt; 安装 -&gt; 选择文件夹里面的.pat文件 -&gt; 点击下一步<br><img src="http://www.zhangyukunblog.top/NAS-09.png" alt="image"></p></li><li><p>配置网络，建议大家选择手动设置，根据自己家里实际的网络配置好ip、掩码<br><img src="http://www.zhangyukunblog.top/NAS-10.png" alt="image"></p></li><li><p>点击完成 -&gt; 等待安装结束</p></li><li><p>浏览器输入刚才设置的ip地址就可以访问NAS的管理界面了<br><img src="http://www.zhangyukunblog.top/NAS-12.png" alt="image"></p><p>  至此黑群辉搭建完成   </p></li></ul><hr><h2 id="二-Frp内网穿透"><a href="#二-Frp内网穿透" class="headerlink" title="二.Frp内网穿透"></a>二.Frp内网穿透</h2><h3 id="1-frp实现的功能"><a href="#1-frp实现的功能" class="headerlink" title="1.frp实现的功能"></a>1.frp实现的功能</h3><ol><li>外网通过ssh访问内网机器</li><li>自定义绑定域名访问内网web服务、家庭NAS、家庭路由器等等处于内网的设备</li></ol><h3 id="2-配置前准备"><a href="#2-配置前准备" class="headerlink" title="2.配置前准备"></a>2.配置前准备</h3><h4 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h4><table><thead><tr><th>名称</th><th>作用</th></tr></thead><tbody><tr><td>公网服务器1台</td><td>做frp服务器端</td></tr><tr><td>内网服务器1台</td><td>例如家里的路由器、NAS等</td></tr><tr><td>公网服务器绑定域名1个</td><td>用作域名解析</td></tr><tr><td>公网服务器绑定域名1个</td><td>用作域名解析</td></tr><tr><td>公网服务器绑定域名1个</td><td>用作域名解析</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>搭建黑群晖NAS+Frp内网穿透实现外网访问家庭NAS</title>
      <link href="/2019/08/01/nas-frp/"/>
      <url>/2019/08/01/nas-frp/</url>
      
        <content type="html"><![CDATA[<h1 id="搭建黑群晖NAS-Frp内网穿透实现外网访问家庭NAS"><a href="#搭建黑群晖NAS-Frp内网穿透实现外网访问家庭NAS" class="headerlink" title="搭建黑群晖NAS+Frp内网穿透实现外网访问家庭NAS"></a>搭建黑群晖NAS+Frp内网穿透实现外网访问家庭NAS</h1><h2 id="一-搭建黑群晖"><a href="#一-搭建黑群晖" class="headerlink" title="一.搭建黑群晖"></a>一.搭建黑群晖</h2><h3 id="工具准备"><a href="#工具准备" class="headerlink" title="工具准备"></a>工具准备</h3><table><thead><tr><th>名称</th><th>作用</th></tr></thead><tbody><tr><td>不用U盘一个</td><td>用作引导盘</td></tr><tr><td>不用的电脑或者买的微型机</td><td>安装NAS</td></tr><tr><td>家用电脑</td><td>用于安装和配置NAS</td></tr><tr><td>芯片无忧</td><td>用于查看U盘的PID和VID</td></tr><tr><td>osfmount</td><td>改写引导映像.img文件里面的PID和VID</td></tr><tr><td>Win32DiskImager</td><td>将映像文件写进U盘</td></tr><tr><td>Synology Assistant</td><td>用于配置NAS</td></tr></tbody></table><h3 id="制作引导盘方法一"><a href="#制作引导盘方法一" class="headerlink" title="制作引导盘方法一"></a>制作引导盘方法一</h3><ul><li><p>下载并安装芯片无忧、osfmount、Win32DiskImager、Synology Assistant</p></li><li><p>把U盘插入家用电脑 -&gt; 打开芯片无忧，会自动读取到U盘的PID和VID -&gt; 截图或用记事本记下来，后面会用到。<br><img src="http://www.zhangyukunblog.top/NAS-01.png" alt="image"></p></li><li><p>打开osfmount，点击左下角的Mount new<br><img src="http://www.zhangyukunblog.top/NAS-02.png" alt="image"></p></li><li><p>选择文件夹中的.img文件，一定注意要<strong>去掉</strong>窗口下面<strong>Read-only。 drvie前面的对号√</strong> -&gt; 点击OK<br><img src="http://www.zhangyukunblog.top/NAS-03-1.png" alt="image"></p></li><li><p>完成后双击打开，进入里面grub文件夹然后打开grub.cfg这个文件，找到并修改<strong>set vid = 0x1234；set vid=0x1234</strong>这两行里面的数字为刚才截图保存的数字。然后保存点击<strong>Dismount all &amp; Exit</strong></p><p>  <img src="http://www.zhangyukunblog.top/NAS-04.png" alt="image"><br><img src="http://www.zhangyukunblog.top/NAS-05.png" alt="image"></p></li><li><p>打开Win32DiskImager软件-&gt;选择img文件的路径-&gt;选择U盘的路径-&gt;点击write<br><img src="http://www.zhangyukunblog.top/NAS-06.png" alt="image"></p><p>  到此U盘引导制作完成</p></li></ul><hr><h3 id="在旧电脑安装DSM"><a href="#在旧电脑安装DSM" class="headerlink" title="在旧电脑安装DSM"></a>在旧电脑安装DSM</h3><ul><li><p>U盘插入旧电脑然后用U盘引导启动，出现下图即表示系统启动成功<br><img src="http://www.zhangyukunblog.top/NAS-07.png" alt="image"></p></li><li><p>在家用电脑上打开Synology Assistant，会自动搜索局域网里面的NAS主机<br><img src="http://www.zhangyukunblog.top/NAS-08.png" alt="image"></p></li><li><p>右键点击搜索到的主机 -&gt; 安装 -&gt; 选择文件夹里面的.pat文件 -&gt; 点击下一步<br><img src="http://www.zhangyukunblog.top/NAS-09.png" alt="image"></p></li><li><p>配置网络，建议大家选择手动设置，根据自己家里实际的网络配置好ip、掩码<br><img src="http://www.zhangyukunblog.top/NAS-10.png" alt="image"></p></li><li><p>点击完成 -&gt; 等待安装结束</p></li><li><p>浏览器输入刚才设置的ip地址就可以访问NAS的管理界面了<br><img src="http://www.zhangyukunblog.top/NAS-12.png" alt="image"></p><p>  至此黑群辉搭建完成   </p></li></ul><hr><h2 id="二-Frp内网穿透"><a href="#二-Frp内网穿透" class="headerlink" title="二.Frp内网穿透"></a>二.Frp内网穿透</h2><h3 id="1-frp实现的功能"><a href="#1-frp实现的功能" class="headerlink" title="1.frp实现的功能"></a>1.frp实现的功能</h3><ol><li>外网通过ssh访问内网机器</li><li>自定义绑定域名访问内网web服务、家庭NAS、家庭路由器等等处于内网的设备</li></ol><h3 id="2-配置前准备"><a href="#2-配置前准备" class="headerlink" title="2.配置前准备"></a>2.配置前准备</h3><h4 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h4><table><thead><tr><th>名称</th><th>作用</th></tr></thead><tbody><tr><td>公网服务器1台</td><td>做frp服务器端</td></tr><tr><td>内网服务器1台</td><td>例如家里的路由器、NAS等</td></tr><tr><td>公网服务器绑定域名1个</td><td>用作域名解析</td></tr><tr><td>公网服务器绑定域名1个</td><td>用作域名解析</td></tr><tr><td>公网服务器绑定域名1个</td><td>用作域名解析</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>shell入门——参数的传递和数组</title>
      <link href="/2018/03/13/shell-can-shu-chuan-di/"/>
      <url>/2018/03/13/shell-can-shu-chuan-di/</url>
      
        <content type="html"><![CDATA[<h2 id="shell传递参数"><a href="#shell传递参数" class="headerlink" title="shell传递参数"></a><strong>shell传递参数</strong></h2><table><thead><tr><th align="center">参数</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">$0</td><td align="center">当前脚本的文件名</td></tr><tr><td align="center">n</td><td align="center">传递给脚本或函数的参数。n是一个数字，表示第几个参数。例如,第一个参数是$1，第二个参数是$2</td></tr><tr><td align="center">$#</td><td align="center">传递给脚本或函数的参数个数。</td></tr><tr><td align="center">$*</td><td align="center">传递给脚本或函数的所有参数。(整体)</td></tr><tr><td align="center">$@</td><td align="center">传递给脚本或函数的所有参数。(单个)</td></tr><tr><td align="center">$?</td><td align="center">上个命令的退出状态，或函数的返回值。</td></tr><tr><td align="center">$$</td><td align="center">当前Shell进程ID。对于Shell脚本，就是这些脚本所在的进程ID。</td></tr><tr><td align="center">### <strong>命令行参数</strong></td><td align="center"></td></tr><tr><td align="center">运行脚本时传递给脚本的参数称为命令行参数。命令行参数用 $n 表示，例如，$1 表示第一个参数，$2 表示第二个参数，依次类推。</td><td align="center"></td></tr><tr><td align="center"><strong>实例</strong></td><td align="center"></td></tr><tr><td align="center">```</td><td align="center"></td></tr><tr><td align="center">#!/bin/bash</td><td align="center"></td></tr><tr><td align="center">echo “Shell 传递参数实例！”;</td><td align="center"></td></tr><tr><td align="center">echo “执行的文件名：$0”;</td><td align="center"></td></tr><tr><td align="center">echo “第一个参数为：$1”;</td><td align="center"></td></tr><tr><td align="center">echo “第二个参数为：$2”;</td><td align="center"></td></tr><tr><td align="center">echo “第三个参数为：$3”;</td><td align="center"></td></tr><tr><td align="center">```</td><td align="center"></td></tr><tr><td align="center">运行结果</td><td align="center"></td></tr><tr><td align="center">```</td><td align="center"></td></tr><tr><td align="center">Shell 传递参数实例！</td><td align="center"></td></tr><tr><td align="center">执行的文件名：./sh01.sh</td><td align="center"></td></tr><tr><td align="center">第一个参数为：1</td><td align="center"></td></tr><tr><td align="center">第二个参数为：2</td><td align="center"></td></tr><tr><td align="center">第三个参数为：3</td><td align="center"></td></tr><tr><td align="center">```</td><td align="center"></td></tr><tr><td align="center">### <strong>$*和$@的区别</strong></td><td align="center"></td></tr><tr><td align="center">$* 和 $@ 都表示传递给函数或脚本的所有参数，不被双引号(“ “)包含时，都以”$1” “$2” … “$n” 的形式输出所有参数。</td><td align="center"></td></tr></tbody></table><p>但是当它们被双引号(“ “)包含时，”$*” 会将所有的参数作为一个整体，以”$1 $2 … $n”的形式输出所有参数；”$@” 会将各个参数分开，以”$1” “$2” … “$n” 的形式输出所有参数。</p><pre><code>#!/bin/bashecho &quot;-- \$* 演示 ---&quot;for i in $*do    echo &quot;$i&quot;doneecho &quot;-- \$@ 演示 ---&quot;for i in $@do    echo &quot;$i&quot;doneecho &quot;-- \&quot;\$*\&quot; 演示 ---&quot;for i in &quot;$*&quot;do    echo &quot;$i&quot;doneecho &quot;-- \&quot;\$@\* 演示 ---&quot;for i in &quot;$@&quot;do    echo &quot;$i&quot;done</code></pre><p>运行结果</p><pre><code>./sh02.sh a b c d-- $* 演示 ---abcd-- $@ 演示 ---abcd-- &quot;$*&quot; 演示 ---a b c d-- &quot;$@\* 演示 ---abcd</code></pre><h2 id="shell数组"><a href="#shell数组" class="headerlink" title="shell数组"></a><strong>shell数组</strong></h2><p>数组中可以存放多个值。Bash Shell 只支持一维数组（不支持多维数组），初始化时不需要定义数组大小，与大部分编程语言类似，数组元素的下标由0开始。 Shell 数组用括号来表示，元素用”空格”符号分割开。</p><h3 id="数组的定义"><a href="#数组的定义" class="headerlink" title="数组的定义"></a><strong>数组的定义</strong></h3><pre><code>#方法一array=(A B C D)#方法二array[0]=Aarray[1]=Barraye[2]=C</code></pre><h3 id="读取数组元素的值"><a href="#读取数组元素的值" class="headerlink" title="读取数组元素的值"></a><strong>读取数组元素的值</strong></h3><pre><code>!/bin/basharray=(A B C D)echo &quot;第一个元素为: ${array[0]}&quot;echo &quot;第二个元素为: ${array[1]}&quot;echo &quot;第三个元素为: ${array[2]}&quot;echo &quot;第四个元素为: ${array[3]}&quot;# 运行结果第一个元素为: A第二个元素为: B第三个元素为: C第四个元素为: D</code></pre><h3 id="获取数组所有元素的值"><a href="#获取数组所有元素的值" class="headerlink" title="获取数组所有元素的值"></a><strong>获取数组所有元素的值</strong></h3><p>使用@ 或 * 可以获取数组中的所有元素</p><pre><code>#!/bin/basharray[0]=Aarray[1]=Barray[2]=Carray[3]=Decho &quot;数组的元素为: ${array[*]}&quot;echo &quot;数组的元素为: ${array[@]}&quot;#运行结果数组的元素为: A B C D数组的元素为: A B C D</code></pre><h3 id="获取数组长度"><a href="#获取数组长度" class="headerlink" title="获取数组长度"></a><strong>获取数组长度</strong></h3><p>获取数组长度的方法与获取字符串长度的方法相同，前面加#号</p><pre><code>#!/bin/bashmy_array[0]=Amy_array[1]=Bmy_array[2]=Cmy_array[3]=Decho &quot;数组元素个数为: ${#my_array[@]}&quot;#运行结果数组元素个数为: 4</code></pre><h3 id="循环赋值与输出"><a href="#循环赋值与输出" class="headerlink" title="循环赋值与输出"></a><strong>循环赋值与输出</strong></h3><pre><code>#!/bin/bashdeclare -a arryi=0    read -p &quot;输入数组长度:&quot; lengthwhile [ $i -lt $length ]do    read -p &quot;input $i:&quot; n    arry[$i]=&quot;$n&quot;    let i++doneecho &quot;-------::::WHILE循环输出 使用 let i++ 自增:::::---------&quot;j=0while [ $j -lt ${#arry[@]} ]do  echo ${arry[$j]}  let j++done</code></pre>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>shell入门——基本运算符</title>
      <link href="/2018/03/11/shell-ji-ben-yun-suan-fu/"/>
      <url>/2018/03/11/shell-ji-ben-yun-suan-fu/</url>
      
        <content type="html"><![CDATA[<h2 id="shell基本运算符"><a href="#shell基本运算符" class="headerlink" title="shell基本运算符"></a>shell基本运算符</h2><h3 id="类别介绍"><a href="#类别介绍" class="headerlink" title="类别介绍"></a>类别介绍</h3><ul><li>算术运算符</li><li>关系运算符</li><li>布尔运算符</li><li>字符串运算符</li><li>文件测试运算符</li></ul><h3 id="几点注意"><a href="#几点注意" class="headerlink" title="几点注意"></a>几点注意</h3><ul><li>在进行求值操作时要使用expr</li><li>表达式和运算符之间必须要有空格</li><li>算数表达式要完全被``包含<pre><code>a=`expr 2 + 2`echo &quot;两数之和为 : $a&quot;</code></pre><h3 id="算数运算符"><a href="#算数运算符" class="headerlink" title="算数运算符"></a><strong>算数运算符</strong></h3><table><thead><tr><th align="center">运算符</th><th align="center">说明</th><th align="center">使用举例</th></tr></thead><tbody><tr><td align="center">+</td><td align="center">加法</td><td align="center"><code>expr $a + $b</code></td></tr><tr><td align="center">-</td><td align="center">减法</td><td align="center"><code>expr $a - $b</code></td></tr><tr><td align="center">*</td><td align="center">乘法</td><td align="center"><code>expr $a \* $b</code></td></tr><tr><td align="center">/</td><td align="center">除法</td><td align="center"><code>expr $a / $b</code></td></tr><tr><td align="center">%</td><td align="center">取余</td><td align="center"><code>expr $a % $b</code></td></tr><tr><td align="center">=</td><td align="center">赋值</td><td align="center">a = $b 将变量b的值赋给a</td></tr><tr><td align="center">==</td><td align="center">判相等，相同为true</td><td align="center">[ $a == $b ]</td></tr><tr><td align="center">!=</td><td align="center">判不等，不等为true</td><td align="center">[ $a != $b ]</td></tr></tbody></table></li></ul><p><strong>注意</strong>：</p><ol><li>乘号(*)前边必须加反斜杠(\)转义才能实现乘法运算；</li><li>条件表达式要放在方括号之间，并且要有空格，例如: [$a==$b] 是错误的，必须写成 [ $a == $b ]。</li></ol><p><strong>实例</strong>：</p><pre><code>#!/bin/basha=10b=20val=`expr $a + $b`echo &quot;a + b : $val&quot;val=`expr $a - $b`echo &quot;a - b : $val&quot;val=`expr $a \* $b`echo &quot;a * b : $val&quot;val=`expr $b / $a`echo &quot;b / a : $val&quot;val=`expr $b % $a`echo &quot;b % a : $val&quot;if [ $a == $b ]then   echo &quot;a 等于 b&quot;else   echo &quot;a 不等于 b&quot;fi</code></pre><p>输出结果</p><pre><code>a + b : 30a - b : -10a * b : 200b / a : 2b % a : 0a 不等于 b</code></pre><h3 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a><strong>关系运算符</strong></h3><p>关系运算符只支持数字，不支持字符串，除非字符串的值是数字<br>假设a=20; b=30.</p><table><thead><tr><th align="center">运算符</th><th align="center">说明</th><th align="center">使用举例</th></tr></thead><tbody><tr><td align="center">-eq</td><td align="center">两个变量相等 返回 true</td><td align="center">[ $a -eq $b ] 返回false</td></tr><tr><td align="center">-ne</td><td align="center">两个变量不相等 返回 true</td><td align="center">[ $a -ne $b ] 返回true</td></tr><tr><td align="center">-gt</td><td align="center">左变量 &gt; 右变量  返回true</td><td align="center">[ $a -gt $b ] 返回false</td></tr><tr><td align="center">-lt</td><td align="center">左变量 &lt; 右变量  返回true</td><td align="center">[ $a -lt $b ] 返回true</td></tr><tr><td align="center">-ge</td><td align="center">左变量 &gt;= 右变量  返回true</td><td align="center">[ $a -ge $b ] 返回false</td></tr><tr><td align="center">-le</td><td align="center">左变量 &lt;= 右变量  返回true</td><td align="center">[ $a -le $b ] 返回true</td></tr><tr><td align="center"><strong>注意</strong></td><td align="center"></td><td align="center"></td></tr><tr><td align="center">表达式要放在方括号之间，并且要有空格，[ $a -gt $b ]。</td><td align="center"></td><td align="center"></td></tr></tbody></table><h3 id="字符串运算符"><a href="#字符串运算符" class="headerlink" title="字符串运算符"></a><strong>字符串运算符</strong></h3><p>假设a=“zyk”;b=“xy”.</p><table><thead><tr><th align="center">运算符</th><th align="center">说明</th><th align="center">使用举例</th></tr></thead><tbody><tr><td align="center">=</td><td align="center">两个字符串相等 返回true</td><td align="center">[ $a = $b ] 返回false</td></tr><tr><td align="center">!=</td><td align="center">两个变量不相等 返回 true</td><td align="center">[ $a ！= $b ] 返回true</td></tr><tr><td align="center">z</td><td align="center">字符串长度为0  返回true</td><td align="center">[ -z $a ] 返回false</td></tr><tr><td align="center">n</td><td align="center">字符串长度不为0  返回true</td><td align="center">[ -n $a ] 返回true</td></tr><tr><td align="center">str</td><td align="center">字符串不为空  返回true</td><td align="center">[ $a ] 返回true</td></tr></tbody></table><h3 id="文件测试运算符"><a href="#文件测试运算符" class="headerlink" title="文件测试运算符"></a><strong>文件测试运算符</strong></h3><p>file=”/shell-script/sh02.sh”</p><table><thead><tr><th align="center">运算符</th><th align="center">说明</th><th align="center">使用举例</th></tr></thead><tbody><tr><td align="center">-b</td><td align="center">文件是块设备文件 返回true</td><td align="center">[ -b $file ]返回false</td></tr><tr><td align="center">-c</td><td align="center">文件是字符设备文件 返回 true</td><td align="center">[ -c $file ]返回false</td></tr><tr><td align="center">-d</td><td align="center">文件是目录文件 返回true</td><td align="center">[ -d $file ]返回false</td></tr><tr><td align="center">-f</td><td align="center">文件是普通文件(不是目录也不是设备文件)返回 true</td><td align="center">[ -f $file ]返回true</td></tr><tr><td align="center">-g</td><td align="center">文件设置了<a href="http://blog.csdn.net/turkeyzhou/article/details/2408222" target="_blank" rel="noopener">SGID位</a>  返回true</td><td align="center">[ -g $file ]返回false</td></tr><tr><td align="center">-k</td><td align="center">文件设置了<a href="http://blog.csdn.net/baoendemao/article/details/52847641" target="_blank" rel="noopener">粘着位</a>  返回true</td><td align="center">[ -k $file]返回false</td></tr><tr><td align="center">-p</td><td align="center">文件是有名管道 返回true</td><td align="center">[ -p $file ]返回false</td></tr><tr><td align="center">-u</td><td align="center">文件设置了<a href="http://blog.csdn.net/turkeyzhou/article/details/2408222" target="_blank" rel="noopener">SUID位</a>  返回true</td><td align="center">[ -u $file ]返回false</td></tr><tr><td align="center">-r</td><td align="center">文件可读  返回true</td><td align="center">[ -r $file ]返回 true</td></tr><tr><td align="center">-w</td><td align="center">文件可写  返回true</td><td align="center">[ -w $file ] 返回true</td></tr><tr><td align="center">-x</td><td align="center">文件可执行  返回true</td><td align="center">[ -x $file ] 返回true</td></tr><tr><td align="center">-s</td><td align="center">文件不为空  返回true</td><td align="center">[ -s $file ] 返回true</td></tr><tr><td align="center">-e</td><td align="center">文件存在  返回true</td><td align="center">[ -e $file ] 返回true</td></tr></tbody></table><p> <strong>用法实例</strong></p><pre><code>#!/bin/bashfile=&quot;/shell-script/sh02.sh&quot;if [ -r $file ]then   echo &quot;文件可读&quot;else   echo &quot;文件不可读&quot;fiif [ -w $file ]then   echo &quot;文件可写&quot;else   echo &quot;文件不可写&quot;fiif [ -x $file ]then   echo &quot;文件可执行&quot;else   echo &quot;文件不可执行&quot;fiif [ -f $file ]then   echo &quot;文件为普通文件&quot;else   echo &quot;文件为特殊文件&quot;fiif [ -d $file ]then   echo &quot;文件是个目录&quot;else   echo &quot;文件不是个目录&quot;fiif [ -s $file ]then   echo &quot;文件不为空&quot;else   echo &quot;文件为空&quot;fiif [ -e $file ]then   echo &quot;文件存在&quot;else   echo &quot;文件不存在&quot;fi</code></pre><h3 id="shell注释的用法"><a href="#shell注释的用法" class="headerlink" title="shell注释的用法"></a><strong>shell注释的用法</strong></h3><pre><code>#!bin/bash# echo &quot;我是单行注释，你看不到我&quot;:&lt;&lt;!echo &quot;我是多行注释1，你看不到我&quot;echo &quot;我是多行注释2，你看不到我&quot;!# 其实!可以随意命名，只要别跟中间的注释内容相同即可。当Shell脚本执行遇到:&lt;&lt;!，就不执行脚本了，一直到再碰!后才重新开始执行脚本。如果忘记!或者写错(由于已经不执行脚本了，所以即使写错也不会报错)，则:&lt;&lt;!之后的脚步将都不会执行。</code></pre>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>shell入门——变量</title>
      <link href="/2018/03/09/shell-bian-liang/"/>
      <url>/2018/03/09/shell-bian-liang/</url>
      
        <content type="html"><![CDATA[<h2 id="shell变量"><a href="#shell变量" class="headerlink" title="shell变量"></a>shell变量</h2><h3 id="1-使用变量：加美元符"><a href="#1-使用变量：加美元符" class="headerlink" title="1. 使用变量：加美元符"></a>1. 使用变量：加美元符</h3><pre><code>your_name=&quot;zhangyk&quot;echo $your_name #花括号作用是识别变量边界</code></pre><h3 id="2-只读变量readonly"><a href="#2-只读变量readonly" class="headerlink" title="2. 只读变量readonly"></a>2. 只读变量readonly</h3><pre><code>Url=&quot;http://www.zhangyukun.top&quot;readonly Url  #这样定义后变量的值不能被改变</code></pre><h3 id="3-删除变量"><a href="#3-删除变量" class="headerlink" title="3. 删除变量"></a>3. 删除变量</h3><pre><code>unset your_name  #变量被删除后不能再次使用，不能删除readonly变量</code></pre><h3 id="4-将命令的结果赋值给变量"><a href="#4-将命令的结果赋值给变量" class="headerlink" title="4.将命令的结果赋值给变量"></a>4.将命令的结果赋值给变量</h3><pre><code>variable=`command`  #注意是反引号不是单引号variable=$(command)  #两种方式皆可，但第一种容易混淆。ex:log=$(cat log.txt)echo $log[2018-03-8 20:53:22] 张昱昆正在学习Shell基础</code></pre><h3 id="5-三种变量类型"><a href="#5-三种变量类型" class="headerlink" title="5.三种变量类型"></a>5.三种变量类型</h3><ul><li>局部变量：局部变量在脚本或命令中定义，仅在当前shell实例中有效，其他shell启动的程序不能访问局部变量。</li><li>环境变量：所有的程序，包括shell启动的程序，都能访问环境变量，有些程序需要环境变量来保证其正常运行。必要的时候shell脚本也可以定义环境变量。（类似c的全局变量）<pre><code>export $your_name</code></pre></li><li>shell变量：shell变量是由shell程序设置的特殊变量。shell变量中有一部分是环境变量，有一部分是局部变量，这些变量保证了shell的正常运行<h2 id="Shell-字符串"><a href="#Shell-字符串" class="headerlink" title="Shell 字符串"></a>Shell 字符串</h2>字符串是shell编程中最常用最有用的数据类型（除了数字和字符串，也没啥其它类型好用了），字符串可以用单引号，也可以用双引号。</li></ul><h3 id="1-单引号和双引号的区别"><a href="#1-单引号和双引号的区别" class="headerlink" title="1. 单引号和双引号的区别"></a>1. 单引号和双引号的区别</h3><p>以单引号<strong>‘ ‘</strong>包围变量的值时，单引号里面是什么就输出什么，即使内容中有变量和命令（命令需要反引起来）也会把它们原样输出。这种方式比较适合定义显示纯字符串的情况，即不希望解析变量、命令等的场景。</p><p>以双引号<strong>“ “</strong>包围变量的值时，输出时会先解析里面的变量和命令，而不是把双引号中的变量名和命令原样输出。这种方式比较适合字符串中附带有变量和命令并且想将其解析后再输出的变量定义。</p><p>如下代码说明</p><pre><code>#!/bin/bashurl=&quot;http://zhangyukun.top&quot;website1=&#39;kun&#39;s blog：${url}&#39;website2=&quot;kun&#39;s blog：${url}&quot;echo $website1echo ${website2}  </code></pre><p>运行结果</p><pre><code>kun&#39;s blog：${url}kun&#39;s blog：http://zhangyukun.top </code></pre><h3 id="2-获取字符串长度"><a href="#2-获取字符串长度" class="headerlink" title="2. 获取字符串长度"></a>2. 获取字符串长度</h3><pre><code>str=“abc,def,ghi,abcjkl”  echo ${#str} #在花括号中给变量名前加#号#运行结果18</code></pre><h3 id="3-字符串的截取"><a href="#3-字符串的截取" class="headerlink" title="3. 字符串的截取"></a>3. 字符串的截取</h3><h4 id="格式：-str-position"><a href="#格式：-str-position" class="headerlink" title="格式：${str:position}"></a>格式：${str:position}</h4><pre><code>#从位置position+1开始截取  echo ${str:5}   #从第5+1个元素开始截取#运行结果：ef,ghi,abcjkl </code></pre><h4 id="格式：-str-start-length"><a href="#格式：-str-start-length" class="headerlink" title="格式：${str:start:length}"></a>格式：${str:start:length}</h4><pre><code>#从start+1开始截取长度为length的字符串  echo ${str:5：8}   #从第5+1个元素开始截取长度8#运行结果：ef,ghi,a </code></pre><h4 id="格式：-str-substring-或-str-substring"><a href="#格式：-str-substring-或-str-substring" class="headerlink" title="格式：${str#substring}或${str##substring}"></a>格式：${str#<em>substring}或${str##</em>substring}</h4><pre><code>#从str开头开始删除到最近的substring包括substringecho ${str#*c}   #删除 开始~c *为通配符#运行结果：,def,ghi,abcjkl </code></pre><pre><code>#从str开头开始删除到最远的substring包括substringecho ${str##*c}   #删除 开始~c *为通配符#运行结果：jkl</code></pre><h4 id="格式-str-substring-或-str-substring"><a href="#格式-str-substring-或-str-substring" class="headerlink" title="格式${str%substring}或${str%%substring}"></a>格式${str%substring<em>}或${str%%substring</em>}</h4><pre><code>#从str结尾开始删除到最近的substring包括substringecho ${str%c*}   #删除 c~结尾 *为通配符#运行结果：abc,def,ghi,ab </code></pre><pre><code>#从str结尾开始删除到最远的substring包括substringecho ${str%%c*}   #删除 c~结尾 *为通配符#运行结果：ab</code></pre><p>总结<br> #、## 表示从左边开始删除。一个 # 表示从左边删除到第一个指定的字符；两个 # 表示从左边删除到最后一个指定的字符。<br>%、%% 表示从右边开始删除。一个 % 表示从右边删除到第一个指定的字符；两个 % 表示从左边删除到最后一个指定的字符。<br>删除包括了指定的字符本身。</p><h3 id="4-字符串的替换"><a href="#4-字符串的替换" class="headerlink" title="4. 字符串的替换"></a>4. 字符串的替换</h3><h4 id="格式-str-substring-replace或-str-substring-replace"><a href="#格式-str-substring-replace或-str-substring-replace" class="headerlink" title="格式 ${str/substring/replace或${str//substring/replace}"></a>格式 ${str/substring/replace或${str//substring/replace}</h4><pre><code>#用TEST替换字符串中第一个abc  echo ${str/abc/TEST}  #运行结果：TEST,def,ghi,abcjkl  </code></pre><pre><code>#用TEST替换字符串所有的abc  echo ${str//abc/TEST}  #运行结果：TEST,def,ghi,TESTjkl  </code></pre><pre><code>#从str开头匹配，用TEST替换最长的a*c  echo ${str/#*c/TEST}  #TESTjkl </code></pre>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>交换基础(3)--STP(续)</title>
      <link href="/2017/11/06/ji-chong-yin-tuo-bu-bian-hua-dao-zhi-de-lian-lu-gu-zhang-qian-jie/"/>
      <url>/2017/11/06/ji-chong-yin-tuo-bu-bian-hua-dao-zhi-de-lian-lu-gu-zhang-qian-jie/</url>
      
        <content type="html"><![CDATA[<h2 id="几种因拓扑变化导致的链路故障浅解"><a href="#几种因拓扑变化导致的链路故障浅解" class="headerlink" title="几种因拓扑变化导致的链路故障浅解"></a>几种因拓扑变化导致的链路故障浅解</h2><h3 id="认识STP的两种BPDU"><a href="#认识STP的两种BPDU" class="headerlink" title="认识STP的两种BPDU"></a>认识STP的两种BPDU</h3><ol><li>配置BPDU:也就是上篇所说讲到的在选举根桥，根端口，指定端口的过程中用于交换各交换机配置信息的数据包。</li><li>拓扑变化通知BPDU(TCN BPDU)：当交换机需要将拓扑更改信号发出时，它便开始通过自己的根端口(root port)发送 TCN，当接受交换机从它的指定端口(designate port)接收到TCN类BPDU时,它必须为其做转发,让它继续从自已的根端口上发送TCN BPDU包,然后给发送者做出回应(回复一个TC字段=1的配置BPDU)，这样一级一级地传到根桥(root bridge)后,TCN的任务才算完成.</li></ol><h3 id="认识几种计时器"><a href="#认识几种计时器" class="headerlink" title="认识几种计时器"></a>认识几种计时器</h3><ol><li><p>Max Age：端口的BPDU老化时间，端口会根据接收到的BPDU存储所接收到的最好的四个信息（根桥BID、累计根路径开销、发送者BID和发送端口PID）。每次接收到合适的BPDU，端口都会启动这个Max Age计时器。超过这个MaxAge时间端口接收不到合适BPDU，就会认为网络直径过大。这个时间默认为20秒。</p></li><li><p>Forwarding Delay Timer：指一个端口Listening和Learning的各自时间，默认为15秒，即Listening状态持续15秒，随后Learning状态再持续15秒。这两个状态下的端口会处于Blocking状态，这是STP用于避免临时环路的关键。</p></li><li><p>Hello Timer：STP交换机发送BPDU的时间间隔。当网络拓扑稳定之后，该计时器的修改只有在根桥修改才有效。根桥会在之后发出的BPDU中填充适当的字段以向其他非根桥传递该计时器修改信息。但当拓扑变化之后，TCN BPDU的发送不受这个计时器的管理。</p></li></ol><p>###几种链路故障</p><h4 id="根桥故障"><a href="#根桥故障" class="headerlink" title="根桥故障"></a>根桥故障</h4><p>根桥down掉之后，非根桥在BPDU老化之后重新选举根桥，原来的y预备端口在选举过程中要进行端口状态的转变，从blocking-&gt;listing-&gt;learning-&gt;forwarding经过2倍的Forwarding<br>Delay=30s后链路重新收敛，此过程大致花费50s左右<br><img src="http://www.zhangyukunblog.top/%E6%A0%B9%E6%A1%A5%E6%95%85%E9%9A%9C.jpg" alt="!image"></p><h3 id="直连链路故障"><a href="#直连链路故障" class="headerlink" title="直连链路故障"></a>直连链路故障</h3><p>SWB检测到直连链路发生故障，预备端口开始端口状态的转换，从blocking-&gt;listing-&gt;learning-&gt;forwarding经过2倍的Forwarding.Delay时间转换成为根端口，此过程花费30s。<br><img src="http://www.zhangyukunblog.top/%E7%9B%B4%E8%BF%9E%E9%93%BE%E8%B7%AF%E6%95%85%E9%9A%9C.png" alt="image"></p><h3 id="非直连链路故障"><a href="#非直连链路故障" class="headerlink" title="非直连链路故障"></a>非直连链路故障</h3><p>当如下图所示位置断开连接，SWB是检测不到链路发生故障的，但是SWB一直接收不到来自根桥的BPDU，Max Age超时后，SWB认为根桥故障了，它开始发送自己的BPDU，SWC的预备端口能收到来自SWB的BPDU，根端口能收到来自根桥的BPDU，显然，在比较优先级后就会不理会来自SWB的BPDU，但SWC的预备端口迟迟收不到来自根桥的BPDU，就会进行端口的状态转换，时间为2倍的Forwarding.Delay，所以此过程花费50s.<br><img src="http://www.zhangyukunblog.top/%E9%9D%9E%E7%9B%B4%E8%BF%9E%E9%93%BE%E8%B7%AF%E6%95%85%E9%9A%9C.png" alt="image"></p>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>交换基础(1)--交换机</title>
      <link href="/2017/10/26/jiao-huan-ji-ji-chu/"/>
      <url>/2017/10/26/jiao-huan-ji-ji-chu/</url>
      
        <content type="html"><![CDATA[<h2 id="交换机基础"><a href="#交换机基础" class="headerlink" title="交换机基础"></a><strong>交换机基础</strong></h2><h3 id="交换机的作用"><a href="#交换机的作用" class="headerlink" title="交换机的作用"></a>交换机的作用</h3><p>交换机工作在OSI的数据链路层，操作对象为数据帧。在收到数据帧后，交换机会根据数据帧的头部信息对数据帧进行转发（隔离冲突域）</p><h3 id="交换机的MAC地址表（转发表）"><a href="#交换机的MAC地址表（转发表）" class="headerlink" title="交换机的MAC地址表（转发表）"></a>交换机的MAC地址表（转发表）</h3><table><thead><tr><th>Vlan</th><th>MAC Address</th><th>Type</th><th>Interface</th></tr></thead><tbody><tr><td>1</td><td>00-00-00-11-11-11</td><td>STATIC</td><td>e0/0/1</td></tr><tr><td>1</td><td>00-00-00-22-22-22</td><td>DYNAMIC</td><td>e0/0/3</td></tr><tr><td>2</td><td>00-00-00-33-33-33</td><td>STATIC</td><td>e0/0/6</td></tr><tr><td>### 三种操作行为</td><td></td><td></td><td></td></tr><tr><td>- 泛洪：数据帧中的目的MAC地址不在交换机的MAC地址表中，则向所有端口转发，这一过程称为泛洪（flood）。</td><td></td><td></td><td></td></tr><tr><td>- 转发：数据帧中的目的MAC地址在交换机的MAC地址表中，则根据转发表直接转发。</td><td></td><td></td><td></td></tr><tr><td>- 丢弃：泛洪之后仍没有学习到目的主机的MAC地址，则丢弃。</td><td></td><td></td><td></td></tr></tbody></table><h3 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h3><ul><li>收到单播帧：交换机在接收到数据帧以后，首先、会记录数据帧中的源MAC地址和对应的接口到MAC表中，接着、会检查自己的MAC表中是否有数据帧中目标MAC地址的信息，如果有则会根据MAC表中记录的对应接口将数据帧发送出去(也就是单播)，如果没有，则会将该数据帧从非接受接口发送出去(也就是广播)</li><li>收到广播帧：直接进行泛洪操作。</li></ul><h3 id="工作过程"><a href="#工作过程" class="headerlink" title="工作过程"></a>工作过程</h3><p><img src="http://img1.51cto.com/attachment/201306/172813479.jpg" alt="image"></p><ul><li>主机A发送一个源MAC地址是自己，目的MAC地址为主机B的的MAC地址的数据帧给交换机。</li><li>交换机收到此数据帧后，首先将数据帧中的源MAC地址(00-00-00-11-11-11)和对应的接口(接口为f0/1) 记录到MAC地址表中。</li></ul><table><thead><tr><th>Vlan</th><th>MAC Address</th><th>Type</th><th>Interface</th></tr></thead><tbody><tr><td>1</td><td>00-00-00-11-11-11</td><td>STATIC</td><td>f0/1</td></tr></tbody></table><ul><li><p>然后交换机会检查自己的MAC地址表中是否有数据帧中的目标MAC地址的信息，如果有，则从MAC地址表中记录的接口发送出去，如果没有，则会将此数据帧从除接收接口(f0/1接口)外的所有接口发送出(泛洪）。</p></li><li><p>主机B收到此数据帧时会响应这个广播，并回应一个数据帧(源MAC地址是自己，目的MAC地址为主机A的MAC地址）给交换机。</p></li><li><p>交换机收到主机B回应的数据帧后，也会记录数据帧中的源MAC地址(00-00-00-22-22-22)和对应接口(f0/2)</p><table><thead><tr><th>Vlan</th><th>MAC Address</th><th>Type</th><th>Interface</th></tr></thead><tbody><tr><td>1</td><td>00-00-00-11-11-11</td><td>STATIC</td><td>f0/1</td></tr><tr><td>1</td><td>00-00-00-22-22-22</td><td>DYNAMIC</td><td>f0/2</td></tr></tbody></table><p>这时，再当主机A和主机B通信时，交换机直接根据MAC地址表中的记录，实现单播了</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>交换基础(2)--STP</title>
      <link href="/2017/10/26/stp-sheng-cheng-shu-xie-yi/"/>
      <url>/2017/10/26/stp-sheng-cheng-shu-xie-yi/</url>
      
        <content type="html"><![CDATA[<h1 id="STP-生成树协议）"><a href="#STP-生成树协议）" class="headerlink" title="STP(生成树协议）"></a>STP(生成树协议）</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>STP(Spanning Tree Protocol)是生成树协议的英文缩写，它警惕的监视着网络中所有的链路，通过关闭任何冗余的接口来确保在网络中不会产生环路。</p><h2 id="产生"><a href="#产生" class="headerlink" title="产生"></a>产生</h2><p>随着局域网规模越来越大，越来越多的交换机被用来实现主机与主机之间的互联。为了避免单点故障引起整个业务的中端，一般会使用冗余链路实现备份。此方法虽然增加了互联的可靠性但随之可能会产生<a href="https://baike.baidu.com/item/%E7%BD%91%E7%BB%9C%E7%8E%AF%E8%B7%AF/1391380?fr=aladdin" target="_blank" rel="noopener">环路</a>问题，所以需要一种既能提供可靠的链路又能避免环路的方法。</p><h2 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h2><ol><li>消除链路的环路</li><li>实现链路备份。</li></ol><h2 id="实现方法"><a href="#实现方法" class="headerlink" title="实现方法"></a>实现方法</h2><p>通过选举根桥和非根桥来构造逻辑上的树形拓扑避免环路的产生</p><h2 id="过程详解"><a href="#过程详解" class="headerlink" title="过程详解"></a>过程详解</h2><h3 id="认识重点术语"><a href="#认识重点术语" class="headerlink" title="认识重点术语"></a>认识重点术语</h3><ol><li>根桥：整个交换网络的“根”。桥ID最小</li><li>非根桥：除根桥外其他的网桥都是非根桥</li><li>指定端口(D):所连网段发送BPDU的端口，每个网段只能有一个指定端口，根桥的每个端口都是指定端口。</li><li>根端口(R)：存在于非根桥上，是去往根桥的最优端口，一个交换机只能有一个根端口，根桥没有。</li><li>备端口(A)：一个端口既不是指定端口也不是根端口，即为预备端口，正常情况下被阻塞。<br><img src="http://www.zhangyukunblog.top/%E4%B8%89%E7%A7%8D%E7%AB%AF%E5%8F%A3.jpg" alt="image"></li><li>桥ID：由16位的桥优先级（0~65535，默认为32768）和48位的MAC地址组成（先比较桥优先级，相同再比MAC）。</li><li>BPDU（桥协议数据单元）：BPDU是运行STP的交换机之间交换的消息帧。BPDU内包含了STP所需的路径和优先级信息，STP利用这些信息来确定根桥以及到根桥的路径。</li></ol><h3 id="根桥的选举"><a href="#根桥的选举" class="headerlink" title="根桥的选举"></a>根桥的选举</h3><p>依据桥ID，桥ID最小的为根桥。默认自己都是根桥，然后通过所有端口<br>转发BPDU报文，对端交换机和自己的比较，从而选举出根桥。如下图所示，A交换机被选举为根桥<br><img src="http://www.zhangyukunblog.top/%E9%80%89%E4%B8%BE%E6%A0%B9%E6%A1%A5.jpg" alt="image"></p><h3 id="根端口的选举"><a href="#根端口的选举" class="headerlink" title="根端口的选举"></a>根端口的选举</h3><h4 id="依据"><a href="#依据" class="headerlink" title="依据"></a>依据</h4><p>根路径开销(root path cost), 对端BID(Bridge id)，对端和本端的PID(Port id)。</p><h4 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h4><p> a. 非根桥交换机上，哪个端口到根桥的开销（确切来说，应该是从根桥到达非根交换机的每个端口的开销，这才是正确的方向）最小，开销最小的端口，即为该非根交换机的根端口。<br> b. 如果到达根桥开销一样，此时再比较上一级（接收BPDU方向）发送者的桥ID。选出发送者桥ID最小的对应的端口。<br> c. 如果上一级发送者桥ID也一样，再比较发送端口的优先级(PID)。选出优先级最小的端口<br> d. 如果发送端口的PID相同，再比较自己的PID优先级，最终选出根端口。</p><p> 选举完成如下图所示<br><img src="http://www.zhangyukunblog.top/%E9%80%89%E4%B8%BE%E6%A0%B9%E7%AB%AF%E5%8F%A3.jpg" alt="image"></p><h3 id="指定端口的选举"><a href="#指定端口的选举" class="headerlink" title="指定端口的选举"></a>指定端口的选举</h3><ol><li>根桥的所有端口都是指定端口</li><li>类比根端口的选举。</li></ol><p>选举完成如下图所示<br><img src="http://www.zhangyukunblog.top/%E6%8C%87%E5%AE%9A%E7%AB%AF%E5%8F%A3%E7%9A%84%E9%80%89%E4%B8%BE.jpg" alt="image"></p><h3 id="端口的状态转换"><a href="#端口的状态转换" class="headerlink" title="端口的状态转换"></a>端口的状态转换</h3><ol><li>Fowarding:转发状态，既可以转发用户流量也可转发BPDU报文。只有根端口和指定端口才能进入。</li><li>Learning：学习状态，大约停留15秒，开始学习MAC地址，构建网桥地址表。</li><li>Listening：侦听状态，大约停留15秒，除了接收BPDU外，还向邻居发送BPDU，通知邻居它将参与构建拓扑。</li><li>Blocking：阻塞状态，仅能接收并处理BPDU报文，不能进行任何转发操作，预备端口的最终状态</li><li>Disable:禁用状态，不进行任何操作。</li></ol><h3 id="几种因拓扑变化引起链路故障的实例"><a href="#几种因拓扑变化引起链路故障的实例" class="headerlink" title="几种因拓扑变化引起链路故障的实例"></a>几种因拓扑变化引起链路故障的实例</h3><p>后续</p>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>简单实例（回文数）学习顺序栈</title>
      <link href="/2017/10/25/hui-wen-shu-shun-xu-zhan/"/>
      <url>/2017/10/25/hui-wen-shu-shun-xu-zhan/</url>
      
        <content type="html"><![CDATA[<h1 id="顺序栈实现回文数判断"><a href="#顺序栈实现回文数判断" class="headerlink" title="顺序栈实现回文数判断"></a>顺序栈实现回文数判断</h1><h2 id="一-思路"><a href="#一-思路" class="headerlink" title="一. 思路"></a>一. 思路</h2><pre><code>根据栈的定义：只允许在一段进行插入和删除操作的线性表。即先入栈的后出栈。所以在进行判断的时候可以只让栈中1/2的元素按出栈顺序出栈和原字符串的前1/2一一比较即可。</code></pre><h2 id="二-分步代码实现"><a href="#二-分步代码实现" class="headerlink" title="二. 分步代码实现"></a>二. 分步代码实现</h2><h3 id="1-类型描述及定义"><a href="#1-类型描述及定义" class="headerlink" title="1. 类型描述及定义"></a>1. 类型描述及定义</h3><pre><code>    typedef struct     {        char date[10];  //定义栈的深度        int top;   //栈顶的指针，指明栈顶位置    }seqstack;</code></pre><h3 id="2-创建空栈"><a href="#2-创建空栈" class="headerlink" title="2. 创建空栈"></a>2. 创建空栈</h3><pre><code>    seqstack *creat()    {        seqstack *s;   //指向顺序栈的指针        s=(seqstack *)malloc(sizeof(seqstack));        s-&gt;top=-1;  //初始化栈顶指针        return s;        }</code></pre><h3 id="3-入栈"><a href="#3-入栈" class="headerlink" title="3. 入栈"></a>3. 入栈</h3><pre><code>    int push_seqstack(seqstack *s,char a[])    {        int i=0;         if(s-&gt;top==9)   //判断栈是否满栈            return 0;        else        {            while(a[i]!=&#39;\0&#39;)  判断是否到字符串的结尾            {                s-&gt;top++;                s-&gt;date[s-&gt;top]=a[i];                fflush(stdin);                i++;             }        }    }</code></pre><h3 id="4-出栈1-2并与原数组的前1-2比较"><a href="#4-出栈1-2并与原数组的前1-2比较" class="headerlink" title="4. 出栈1/2并与原数组的前1/2比较"></a>4. 出栈1/2并与原数组的前1/2比较</h3><pre><code>    int out_seqstack(seqstack *s,char a[])    {        int flag=1;         int n=s-&gt;top;  //标记此时栈内元素的个数        if(s-&gt;top==-1)            return 0;        else        {            for(int j=0;j&lt;(n+1)/2;j++)            {                if(a[j]!=s-&gt;date[s-&gt;top]) /*比较是否为回文数*/                flag=0;                s-&gt;top--;            }            if(flag==1)                printf(&quot;回文&quot;);            else                printf(&quot;不是回文&quot;);        }}</code></pre><h2 id="三-源代码"><a href="#三-源代码" class="headerlink" title="三. 源代码"></a>三. 源代码</h2><pre><code>    #includu&lt;stdio.h&gt;    #include&lt;malloc.h&gt;    typedef struct     {        char date[10];        int top;     }seqstack;    seqstack *creat()    {        seqstack *s;        s=(seqstack *)malloc(sizeof(seqstack));        s-&gt;top=-1;        return s;        }    int push_seqstack(seqstack *s,char a[])    {        int i=0;         if(s-&gt;top==9)            return 0;        else            while(a[i]!=&#39;\0&#39;)            {                s-&gt;top++;                s-&gt;date[s-&gt;top]=a[i];                fflush(stdin);                i++;             }        }    }    int out_seqstack(seqstack *s,char a[])    {        int flag=1;         int n=s-&gt;top;        if(s-&gt;top==-1)            return 0;        else        {            for(int j=0;j&lt;(n+1)/2;j++)            {                if(a[j]!=s-&gt;date[s-&gt;top]) /*比较是否为回文数*/                    flag=0;                s-&gt;top--;            }            if(flag==1)                printf(&quot;回文&quot;);            else                printf(&quot;不是回文&quot;);        }    }     int main(int argc, char *argv[])    {        seqstack *s;        char a[10];        scanf(&quot;%s&quot;,a);        s=creat();        push_seqstack(s,a);        out_seqstack(s,a);    }</code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>TCP的连接建立(三次握手)与断开(四次挥手)</title>
      <link href="/2017/10/23/tcp-yun-shu-lian-jie/"/>
      <url>/2017/10/23/tcp-yun-shu-lian-jie/</url>
      
        <content type="html"><![CDATA[<h1 id="TCP的连接建立-三次握手-与断开-四次挥手"><a href="#TCP的连接建立-三次握手-与断开-四次挥手" class="headerlink" title="TCP的连接建立(三次握手)与断开(四次挥手)"></a>TCP的连接建立(三次握手)与断开(四次挥手)</h1><h2 id="连接过程需要考虑的三个问题"><a href="#连接过程需要考虑的三个问题" class="headerlink" title="连接过程需要考虑的三个问题"></a>连接过程需要考虑的三个问题</h2><ol><li>使建立双方都知道对方的存在</li><li>允许双方协商一些参数(最大窗口…)</li><li>对运输实体资源<h2 id="需知"><a href="#需知" class="headerlink" title="需知"></a>需知</h2>TCP的建立采用客户服务器模式(c/s)主动发起建立连接的应用进程是客户，被动等待连接的是服务器<h2 id="连接建立过程"><a href="#连接建立过程" class="headerlink" title="连接建立过程"></a>连接建立过程</h2>初始状态：连接双方的TCP进程都处于(CLOSED)状态；<strong>道Client是主动打开连接</strong>，<strong>Server是被动打开连接</strong>进入LISTEN状态；</li></ol><p>(1)第一次握手：Client将标志位SYN置为1，随机产生一个值seq=J，并将该数据包发送给Server，Client进入SYN-SENT(同步已发送)状态，等待Server确认。</p><p>(2)第二次握手：Server收到数据包后由标志位SYN=1知道Client请求建立连接，Server将标志位SYN和ACK都置为1，ack=J+1，随机产生一个值seq=K，并将该数据包发送给Client以确认连接请求，Server进入SYN-RCVD(同步收到)状态。</p><p>(3)第三次握手：Client收到确认后，检查ack是否为J+1，ACK是否为1，如果正确则将标志位ACK置为1，ack=K+1，并将该数据包发送给Server，Server检查ack是否为K+1，ACK是否为1，如果正确则连接建立成功，Client和Server进入ESTABLISHED(已建立连接)状态，完成三次握手，随后Client与Server之间可以开始传输数据了。</p><p> <img src="http://s4.51cto.com/wyfs02/M00/75/A5/wKiom1Y__jfCibe6AAAr9T4KX6s781.png" alt="image"></p><h2 id="连接释放过程"><a href="#连接释放过程" class="headerlink" title="连接释放过程"></a>连接释放过程</h2><p> 初始状态：Client和Server都处于ESTABLISHED(已建立连接)状态；<br> (1)第一次挥手：Client发送一个FIN=1，用来关闭Client到Server的数据传送，Client进入FIN_WAIT_1(终止)状态。</p><p>(2)第二次挥手：Server收到FIN后，发送一个ACK给Client，确认序号为收到序号+1(与SYN相同，一个FIN占用一个序号)，Server进入CLOSE_WAIT状态。</p><p>(3)第三次挥手：Server发送一个FIN，用来关闭Server到Client的数据传送，Server进入LAST_ACK(最后确认)状态。</p><p>(4)第四次挥手：Client收到FIN后，Client进入TIME_WAIT(时间等待)状态，接着发送一个ACK给Server，确认序号为收到序号+1，经过2MSL(最长报文寿命)等待后Server进入CLOSED状态，完成四次挥手。</p><p><img src="http://s5.51cto.com/wyfs02/M01/75/A3/wKioL1Y__oeyXYjLAAAuUhKuLQs507.png" alt="image"></p>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
